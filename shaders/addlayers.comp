#version 450
#extension GL_ARB_compute_variable_group_size : enable

layout(local_size_variable) in;
/*layout(r32f, binding = 0) uniform image2D AddendA;
layout(r8, binding = 1) uniform image2D AddendAMask;
layout(r32f, binding = 2) uniform image2D AddendB;
layout(r8, binding = 3) uniform image2D AddendBMask;
layout(r32f, binding = 4) uniform image2D Result;
layout(r8, binding = 5) uniform image2D ResultMask;

void main()
{
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    float dataA = imageLoad(AddendA, pixelCoords).x;
    float maskA = imageLoad(AddendAMask, pixelCoords).x;
    
    float dataB = imageLoad(AddendB, pixelCoords).x;
    float maskB = imageLoad(AddendBMask, pixelCoords).x;
    
    if(maskA > 0 || maskB > 0)
    {
        imageStore(Result, pixelCoords, vec4(dataA + dataB));
        imageStore(ResultMask, pixelCoords, vec4(1));
    }
    else
        imageStore(ResultMask, pixelCoords, vec4(0));        
}
*/


layout(r32f, binding = 0) uniform image2DArray Data;
layout(r8, binding = 1) uniform image2DArray Mask;

layout(std140, binding = 9) uniform layerIndices
{
    int addendA;
    int maskA;
    int addendB;
    int maskB;
    int result;
    int resultMask;
};


void main()
{
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    float dataA = imageLoad(Data, ivec3(pixelCoords, addendA)).x;
    float maskA = imageLoad(Mask, ivec3(pixelCoords, maskA)).x;
    
    float dataB = imageLoad(Data, ivec3(pixelCoords, addendB)).x;
    float maskB = imageLoad(Mask, ivec3(pixelCoords, maskB)).x;
    
    if(maskA > 0 && maskB > 0)
    {
        imageStore(Data, ivec3(pixelCoords, result), vec4(dataA + dataB));
        imageStore(Mask, ivec3(pixelCoords, resultMask), vec4(1.0));
    }
}
